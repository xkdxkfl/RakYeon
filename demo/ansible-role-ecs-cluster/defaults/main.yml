# Default component state
ecs_state: present

# EC2 instance type to use
ecs_instance_type: "t2.medium"

# Region for EC2 launches
ecs_ec2_region: us-east-1

# EC2 image that contains a Docker server + ECS Agent, AWS provides a suitable default
ecs_ami_id: "ami-0a0064415cdedc552"

# IAM role that will be used to call the AWS ECS API.  This is normally created when you create a default cluster through the AWS console
ecs_instance_iam_role: "ecs_instance_role"

# If you want the instances to be directly remotely accessible
ecs_assign_public_ip: true

# If you want AWS to monitor the EC2 instance for you
ecs_instance_monitoring: true

# Name of the Auto Scaling Group (ASG)
ecs_asg_name: "{{ ecs_cluster_name }}-asg"

# ASG sizing and scaling settings
ecs_asg_min_size: 2
ecs_asg_max_size: 2
ecs_asg_desired_capacity: 2
ecs_asg_default_cooldown: 300

# Tags to set on any EC2 instances created as part of the auto scaling group
ecs_ec2_tags:
  - Name: "ecs-cluster-host"

# Perform a rolling update if the Launch Configuration has changed
ecs_asg_replace_all_instances: yes

# ASG health check settings:
ecs_asg_health_check_period: 60
ecs_asg_health_type: EC2

# Name of this environment, e.g. development, test, staging, production
ecs_env: development

# Cloudwatch namespacing
cloudwatch_namespace: "/ecs/{{ ecs_cluster_name }}-{{ ecs_env }}"

# User-data needed to register the EC2 instance with ECS
ecs_userdata: |
  Content-Type: multipart/mixed; boundary="==BOUNDARY=="
  MIME-Version: 1.0

  --==BOUNDARY==
  MIME-Version: 1.0
  Content-Type: text/text/x-shellscript; charset="us-ascii"
  #!/bin/bash

  # Set cluster name in ECS config
  echo ECS_CLUSTER={{ ecs_cluster_name }} >> /etc/ecs/ecs.config;

  # Install awslogs and the jq JSON parser
  yum install -y awslogs jq

  # Inject the CloudWatch Logs configuration file contents (configuration for awslogs package)
  # Docs: https://docs.aws.amazon.com/de_de/AmazonCloudWatch/latest/logs/AgentReference.html
  cat > /etc/awslogs/awslogs.conf <<- EOF
  [general]
  state_file = /var/lib/awslogs/agent-state

  [/var/log/dmesg]
  file = /var/log/dmesg
  log_group_name = {{ cloudwatch_namespace }}/var/log/dmesg
  log_stream_name = {cluster}/{container_instance_id}

  [/var/log/messages]
  file = /var/log/messages
  log_group_name = {{ cloudwatch_namespace }}/var/log/messages
  log_stream_name = {cluster}/{container_instance_id}
  datetime_format = %b %d %H:%M:%S

  [/var/log/docker]
  file = /var/log/docker
  log_group_name = {{ cloudwatch_namespace }}/var/log/docker
  log_stream_name = {cluster}/{container_instance_id}
  datetime_format = %Y-%m-%dT%H:%M:%S.%f

  [/var/log/ecs/ecs-init.log]
  file = /var/log/ecs/ecs-init.log*
  log_group_name = {{ cloudwatch_namespace }}/var/log/ecs/ecs-init.log
  log_stream_name = {cluster}/{container_instance_id}
  datetime_format = %Y-%m-%dT%H:%M:%SZ

  [/var/log/ecs/ecs-agent.log]
  file = /var/log/ecs/ecs-agent.log.*
  log_group_name = {{ cloudwatch_namespace }}/var/log/ecs/ecs-agent.log
  log_stream_name = {cluster}/{container_instance_id}
  datetime_format = %Y-%m-%dT%H:%M:%SZ

  EOF

  --==BOUNDARY==
  MIME-Version: 1.0
  Content-Type: text/text/x-shellscript; charset="us-ascii"
  #!/bin/bash
  # Set the region to send CloudWatch Logs data to (the region where the container instance is located)
  region=$(curl 169.254.169.254/latest/meta-data/placement/availability-zone | sed s'/.$//')
  sed -i -e "s/region = us-east-1/region = $region/g" /etc/awslogs/awscli.conf

  --==BOUNDARY==
  MIME-Version: 1.0
  Content-Type: text/text/upstart-job; charset="us-ascii"

  #upstart-job
  description "Configure and start CloudWatch Logs agent on Amazon ECS container instance"
  author "Amazon Web Services"
  start on started ecs

  script
      exec 2>>/var/log/ecs/cloudwatch-logs-start.log
      set -x

      until curl -s http://localhost:51678/v1/metadata
      do
          sleep 1
      done

      # Grab the cluster and container instance ARN from instance metadata
      cluster=$(curl -s http://localhost:51678/v1/metadata | jq -r '. | .Cluster')
      container_instance_id=$(curl -s http://localhost:51678/v1/metadata | jq -r '. | .ContainerInstanceArn' | awk -F/ '{print $2}' )

      # Replace the cluster name and container instance ID placeholders with the actual values
      sed -i -e "s/{cluster}/$cluster/g" /etc/awslogs/awslogs.conf
      sed -i -e "s/{container_instance_id}/$container_instance_id/g" /etc/awslogs/awslogs.conf

      service awslogs start
      chkconfig awslogs on
  end script
  --==BOUNDARY==--

